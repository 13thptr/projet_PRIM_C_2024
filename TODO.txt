Reste à faire sur le projet C:

- 3 ter: Créer ma propre image de test pour invalid_max puisque M. Burel a mis deux fois la même image "invalid_height.ppm"

- 3 quater: faire en sorte de prendre en compte la valeur maximale des pixels (cf. énoncé)

- 7: vérifier que tous les prototypes de fonctions correspondent bien à ce qui était demandé.

- 8: fusionner wrappers.h|c et safe_malloc.h|c ?

- 9: uniformiser mes conventions de code, les espaces, etc. "Prettifier" dans CLion ou avec une extension ? Un logiciel ?

- Modifier le makefile pour utiliser une cible "all" tel que prescrit dans le cours.


- Ecrire un manuel d'utilisation du programme, affichable dans le terminal avec
     l'option --help et présent dans main.c sous forme de commentaire. Test + commit.


- Tester et re-tester, avec valgrind XOR ASan

- Ecrire le rapport en LaTeX. 
    -> Overleaf pour me simplifier la vie.

    + Mentionner le paramètre inutile, sa suppression et le traitement de la constante rendue inutile (?) MAX_BYTE.

    + Mentionner l'ajout dans filename.h et filename.c du mot clef "const" à cause de l'erreur -Wdiscarded-qualifiers.
    
    + Mentionner les histoires de if dans une double boucle (cf. pictures.c) et mon choix de factoriser (boucle d'abord, if ensuite)
      + le choix de l'optimisation à la compilation -O2 pour "compenser" ce genre de choses.
      
    + Mentionner l'autre modification apportée à filename.h - > Demander à momo ?

    + Parler de l'évolution des fonctions dans le temps: ajout de checks à la fin, difficultés éventuelles ou même absence de difficultés.
    
    + Faire une recherche du mot "rapport" dans tous les fichiers pour voir ce que j'aurais pu oublier
     
    + Section spécifique pour mix_picture qui m'a pris beaucoup de temps, notamment à cause du double free.

    + Mentionner l'incohérence potentielle entre le contenu d'un fichier (P5/P6) et son extension (ppm/pgm, dans l'ordre inverse fait exprès)
    et ce que j'ai fait pour y remédier. Notamment mix_picture: recombinaison des fichiers BW en fichiers PPM...

    + Section spécifique pour le bonus.


    + Dans une section spécifique "Outils et débogage", parler de la gestion avec git, des choix du Makefile,
    du débogage avec -fsanitize=address et Valgrind et éventuellement
    du bug de cette option avec le malloc fantôme (cf. historique avec git log pour comprendre de quoi je parle)

    + Mentionner le manuel d'utilisation avec --help, les limites du programme.

    + Mentionner les 2 phénomènes mémoire que je n'ai pas encore compris: le problème de malloc avec fsanitize (cf. git log)
        et l'absence de double free après resampling (cf. git log aussi)


    + Parler de la performance du programme (occupation mémoire mesurée avec ..., vitesse mesurée avec timespec ou similaire.)
    et de la façon dont il pourrait être amélioré, du plus simple au plus complexe:
     - gestion d'options en ligne de commande / gestion des chemins 
     - programmation multithread
     - GPU,
     - support de différents formats d'image: lecture, conversion de formats...


- Faire une première archive tar contenant tout ce travail sans aucune exception 

- Faire une seconde archive tar avec un .git modifié pour faire disparaître toute trace du fichier TODO.txt
    (permet de travailler git sur un exemple concret !)


- Faire une archive tar sans fichier git ni ce fichier TODO.

- 